一、源数据：
data_q1.npy：题目所给出的q1信号矩阵
data_q2.npy：题目所给出的q2信号矩阵
data_q3.npy：题目所给出的q3信号矩阵
data_q4.npy：题目所给出的q4信号矩阵

二、本文得到结果主要所用程序：
sample.py：数值模拟，用于生成模拟信号矩阵。（fft2.py与fft2d.py中的sample类起到相同作用）。
fft2.py：一维FFT方法，主要函数储存在FFT类中。
fft2d.py：二维FFT方法。
solve-ffd.py：用一维FFT方法（引用fft2.py）解决四道题目，直接运行输出结果。同时保存结果图片。
solve-ff2d.py：用二维FFT方法（引用fft2d.py）解决四道题目，直接运行输出结果。同时保存结果图片。

三、附加程序、
2d-music.py：二维Music算法，并不作为本文主要算法，仅供参考。
cnn_k_endless.py：本文在展望中所提到的CNN神经网络方法，直接运行即可开始训练模型，并会自动保存中间结果。再次运行会使用目前所保存的、迭代次数最多的模型。由于题中的信号矩阵可以通过sample数值模拟的方式无限生成，所以可以一直训练下去，直到模型达到满意的效果。

四、补充说明
直接运行solve-ffd.py时，会直接把四道题的结果（包括半径和角度）print出来。同时每道题会生成三个结果图片，但是在做下一道题时，会将上一道题的结果图片覆盖。所以如果想看某一道题的三张结果图片，请分别运行q1 q2 q3 q4。fft_angle.png是角度的结果，fft_distance.png是半径的结果。phi_wave.png是论文中所提到的修正FFT方法，是本文特色，用于超分辨识别距离很近（如本题q1中）的两个物体。如果呈下凸函数，说明是距离很近的两个物体，可以运用本文所提到的公式计算二者的角度。

直接运行solve-ff2d.py时，会将过程结果保存到FFt-2d.png中。可以用于很好的可视化二维空间中物体的位置信息。

